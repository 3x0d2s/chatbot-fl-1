# -*- coding: utf8 -*-
import requests
import json
import sqlite3
from random import randint
#
import telebot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
#
from payment_request import paymentDirect
from config_pars import *
import config.config as config
#
bot = telebot.TeleBot(config.BOT_TOKEN)


bot.message_handler(content_types=['document'])


def ddd(msg):
    print(msg.document.file_id)


def createBD_FromDump(path_db, path_dump):
    cur = sqlite3.connect(path_db)
    f = open(path_dump, 'r', encoding='utf-8')
    dump = f.read()
    cur.executescript(dump)


def send_docs(user_id):
    # bot.send_document(user_id, data=config.DOC_1)
    # bot.send_document(user_id, data=config.DOC_2)
    pass


@bot.message_handler(commands=['start'])
def start_handler(message):
    start_text(message.from_user.id)


@bot.message_handler(content_types=['text'])
def change_amount(message):
    msg = message.text.lower().replace(' ', '')

    user_id = message.from_user.id

    product_id: str = msg[0]
    new_amount: str = msg[1:].replace('—Ü–µ–Ω–∞', '')

    if user_id == config.ADMIN_ID and '—Ü–µ–Ω–∞' in msg and new_amount != '' and product_id.isnumeric() == True:
        value = new_amount + '00'

        change_amount_config(config.PATH_SETTINGS, product_id, value)

        bot.send_message(
            chat_id=user_id,
            text=f'–£—Å–ø–µ—à–Ω–æ! –¶–µ–Ω–∞ —Ç–µ–ø–µ—Ä—å {new_amount} —Ä—É–±–ª–µ–π.'
        )
    elif user_id == config.ADMIN_ID and '—Ü–µ–Ω–∞' in msg:
        bot.send_message(
            chat_id=user_id,
            text=f'–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã.'
        )


@bot.message_handler(content_types=['document'])
def change_amount(message):
    print(message.document.file_id)


def start_text(user_id):
    msg = config.START_TEXT
    #
    pay_btn = InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å',
                                   callback_data='choose_product'
                                   )
    inline_markup = InlineKeyboardMarkup().add(pay_btn)
    #
    bot.send_message(chat_id=user_id,
                     text=msg,
                     parse_mode='markdown',
                     reply_markup=inline_markup
                     )
    send_docs(user_id)


@bot.callback_query_handler(func=lambda call: call.data == 'choose_product')
def start_payment(call):
    tg_id = call.message.chat.id
    msg = '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç...'

    amounts = get_amount_config(config.PATH_SETTINGS)

    inline_markup = InlineKeyboardMarkup()
    for product in config.PRODUCTS:
        product_id = product["id"]
        product_name = product["name"]
        product_amount = amounts[product_id-1]["amount"][:-2]

        product = InlineKeyboardButton(text=f"{product_name} - {product_amount} —Ä.",
                                       callback_data=f'product_{product["id"]}'
                                       )
        inline_markup.add(product)

    bot.send_message(
        chat_id=tg_id,
        text=msg,
        parse_mode='markdown',
        reply_markup=inline_markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("product_"))
def start_payment(call):
    product_id = call.data[8:]

    tg_id = call.message.chat.id

    inline_markup = InlineKeyboardMarkup()
    pay_btn_card = InlineKeyboardButton(
        text='–ö–∞—Ä—Ç–æ–π',
        callback_data=f'card_paymant_{product_id}'
    )
    pay_btn_qiwi = InlineKeyboardButton(
        text='Qiwi',
        callback_data=f'qiwi_paymant_{product_id}'
    )
    inline_markup.add(pay_btn_card)
    inline_markup.add(pay_btn_qiwi)

    msg = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã...'
    bot.send_message(chat_id=tg_id,
                     text=msg,
                     parse_mode='markdown',
                     reply_markup=inline_markup
                     )


@bot.callback_query_handler(func=lambda call: call.data.startswith("card_paymant_"))
def start_card_payment(call):
    product_id = int(call.data[13:])

    tg_id = call.message.chat.id
    amount = get_amount_config(config.PATH_SETTINGS)[product_id-1]["amount"]

    msg_id = call.message.message_id
    bot.delete_message(tg_id, msg_id)

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(
        text="–û–ø–ª–∞—Ç–∏—Ç—å",
        pay=True)
    )
    keyboard.add(InlineKeyboardButton(
        text="–û—Ç–º–µ–Ω–∞",
        callback_data=f'product_{product_id}')
    )

    bot.send_invoice(
        chat_id=tg_id,
        title='–î–æ—Å—Ç—É–ø –∫ —Å–∫–∞–∑–∫–∞–º',
        description=config.INVOICE_DESCRIPTION_TEXT,
        provider_token=config.PROVIDER_TOKEN,
        currency='RUB',
        photo_url=None,
        need_phone_number=False,
        need_email=False,
        is_flexible=False,
        prices=[LabeledPrice(label='–î–æ—Å—Ç—É–ø –∫ —Å–∫–∞–∑–∫–∞–º',
                             amount=int(amount))],
        start_parameter='start_parameter',
        invoice_payload=str(product_id),
        reply_markup=keyboard
    )


@bot.pre_checkout_query_handler(func=lambda query: True)
def checkout(query):
    bot.answer_pre_checkout_query(
        pre_checkout_query_id=query.id,
        ok=True
    )


@bot.message_handler(content_types=['successful_payment'])
def got_payment(message):
    tg_id = message.chat.id
    product_id = int(message.successful_payment.invoice_payload)
    successful_payment(tg_id, product_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith("qiwi_paymant_"))
def start_qiwi_payment(call):
    product_id = int(call.data[13:])

    tg_id = call.message.chat.id

    msg_id = call.message.message_id
    bot.delete_message(tg_id, msg_id)

    random_code = randint(100000, 999999)
    db = paymentDirect('db/payment.db')
    if db.get_payment_code(tg_id) == None:
        db.add_payment_to_stack(tg_id, random_code)
    else:
        db.delete_payment(tg_id)
        db.add_payment_to_stack(tg_id, random_code)
    db.close()

    inline_markup = InlineKeyboardMarkup()
    btn_1 = InlineKeyboardButton(
        text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É',
        callback_data=f'check_payment_{product_id}'
    )
    btn_2 = InlineKeyboardButton(
        text='–û—Ç–º–µ–Ω–∞',
        callback_data=f'product_{product_id}'
    )
    inline_markup.add(btn_1)
    inline_markup.add(btn_2)

    amount = get_amount_config(config.PATH_SETTINGS)[
        product_id-1]["amount"][:-2]

    msg = f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ\nü•ù QIWI-–∫–æ—à–µ–ª–µ–∫: +{config.QIWI_ACCOUNT}\n' \
        f'üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É: {random_code}\nüí∞ –°—É–º–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {amount} —Ä—É–±.\n' \
        '*–í–Ω–∏–º–∞–Ω–∏–µ*\n–ó–∞–ø–æ–ª–Ω—è–π—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ!\n' \
        '–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É*.\n–û–ø–ª–∞—á–∏–≤–∞—è, –í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å ' \
        '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º –∏ –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.'
    bot.send_message(
        chat_id=tg_id,
        text=msg,
        parse_mode='markdown',
        reply_markup=inline_markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("check_payment_"))
def check_payment(call):
    product_id = int(call.data[14:])

    db = paymentDirect('db/payment.db')
    user_id = call.from_user.id
    code = db.get_payment_code(user_id)[0]

    isBalanceReplenished = False

    amount_true = get_amount_config(config.PATH_SETTINGS)[
        product_id - 1]["amount"][:-2]

    req = get_qiwi_data()
    for i in req['data']:
        step_code = i['comment']
        amount = i['sum']['amount']
        if step_code == code and amount == amount_true:
            isBalanceReplenished = True
            break

    if isBalanceReplenished == True:
        db.delete_payment(user_id)
        successful_payment(user_id, product_id)
    else:
        bot.send_message(
            chat_id=user_id,
            text="*–û—à–∏–±–∫–∞:* –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.",
            parse_mode="markdown",
        )


def get_qiwi_data():
    s = requests.Session()
    s.headers['authorization'] = 'Bearer ' + config.QIWI_TOKEN
    parameters = {'rows': '50'}
    h = s.get('https://edge.qiwi.com/payment-history/v1/persons/' +
              config.QIWI_ACCOUNT + '/payments', params=parameters)
    h = h.text
    # –ï—Å–ª–∏ –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É, –≤–æ–∑–º–æ–∂–Ω–æ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∫–∏–≤–∏
    return json.loads(h)


def successful_payment(user_id, product_id: int):
    url_btn = InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª...',
                                   url=config.PRODUCTS[product_id-1]["url"]
                                   )
    inline_markup = InlineKeyboardMarkup().add(url_btn)
    #
    bot.send_message(
        chat_id=user_id,
        text='‚úÖ –ü–ª–∞—Ç—ë–∂ –ø—Ä–æ—à—ë–ª, —Å–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!',
        reply_markup=inline_markup
    )


# RUN
if __name__ == '__main__':
    # Create a Data Base from a dump file if db.db isn't exists
    if not os.path.isfile(config.PATH_DB):
        createBD_FromDump(config.PATH_DB, config.PATH_DUMP)
    bot.polling(none_stop=True)
